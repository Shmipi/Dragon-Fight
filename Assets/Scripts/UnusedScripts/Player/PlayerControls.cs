//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""TouchControlMap"",
            ""id"": ""ecfbc57a-4c0b-4cca-9208-2927c11dd4f7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""8784077b-c251-40a8-b046-5de1f47cbc12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""63a6dabb-e353-4a0e-b864-2c1357c4179f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""fa83a7db-799c-4a48-aad2-7ddeeb6dbd0d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPhase"",
                    ""type"": ""Button"",
                    ""id"": ""82b4d3c6-cb5d-4fd5-9aeb-e777f5a1e61a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f8ed82be-f364-451e-97de-7c459788a110"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""216b9201-565e-4957-81df-c94e26104555"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6c5f29c-0fca-4611-8e09-f2f05d7dd80f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""294897a6-05ff-4f26-97cb-e938984beaa0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efe1a898-5abf-4934-ab45-c2d8a667f886"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05e81bb6-57b3-4e92-aec6-04a0c20d45f0"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a6122ed-bf87-47cf-a138-46c1dd06646a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPhase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchControlMap
        m_TouchControlMap = asset.FindActionMap("TouchControlMap", throwIfNotFound: true);
        m_TouchControlMap_Move = m_TouchControlMap.FindAction("Move", throwIfNotFound: true);
        m_TouchControlMap_Attack = m_TouchControlMap.FindAction("Attack", throwIfNotFound: true);
        m_TouchControlMap_TouchPosition = m_TouchControlMap.FindAction("TouchPosition", throwIfNotFound: true);
        m_TouchControlMap_TouchPhase = m_TouchControlMap.FindAction("TouchPhase", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchControlMap
    private readonly InputActionMap m_TouchControlMap;
    private List<ITouchControlMapActions> m_TouchControlMapActionsCallbackInterfaces = new List<ITouchControlMapActions>();
    private readonly InputAction m_TouchControlMap_Move;
    private readonly InputAction m_TouchControlMap_Attack;
    private readonly InputAction m_TouchControlMap_TouchPosition;
    private readonly InputAction m_TouchControlMap_TouchPhase;
    public struct TouchControlMapActions
    {
        private @PlayerControls m_Wrapper;
        public TouchControlMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TouchControlMap_Move;
        public InputAction @Attack => m_Wrapper.m_TouchControlMap_Attack;
        public InputAction @TouchPosition => m_Wrapper.m_TouchControlMap_TouchPosition;
        public InputAction @TouchPhase => m_Wrapper.m_TouchControlMap_TouchPhase;
        public InputActionMap Get() { return m_Wrapper.m_TouchControlMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchControlMapActions set) { return set.Get(); }
        public void AddCallbacks(ITouchControlMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchControlMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchControlMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
            @TouchPhase.started += instance.OnTouchPhase;
            @TouchPhase.performed += instance.OnTouchPhase;
            @TouchPhase.canceled += instance.OnTouchPhase;
        }

        private void UnregisterCallbacks(ITouchControlMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
            @TouchPhase.started -= instance.OnTouchPhase;
            @TouchPhase.performed -= instance.OnTouchPhase;
            @TouchPhase.canceled -= instance.OnTouchPhase;
        }

        public void RemoveCallbacks(ITouchControlMapActions instance)
        {
            if (m_Wrapper.m_TouchControlMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchControlMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchControlMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchControlMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchControlMapActions @TouchControlMap => new TouchControlMapActions(this);
    public interface ITouchControlMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchPhase(InputAction.CallbackContext context);
    }
}
