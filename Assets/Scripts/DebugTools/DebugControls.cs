//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/DebugTools/DebugControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DebugControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DebugControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebugControls"",
    ""maps"": [
        {
            ""name"": ""DebugActionMap"",
            ""id"": ""621d39f2-e717-4f49-8f45-121fe91ab8dc"",
            ""actions"": [
                {
                    ""name"": ""Idle"",
                    ""type"": ""Button"",
                    ""id"": ""1a9e31a8-1f8c-4ef0-a234-baf5fb2ba209"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""2247b9de-fba5-4307-87de-7d831d4d2eb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""fed5801f-452b-4a3c-8a7a-2659b25da256"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackF"",
                    ""type"": ""Button"",
                    ""id"": ""5de1f5a6-7c35-45e7-a952-97cbeefcaf14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackB"",
                    ""type"": ""Button"",
                    ""id"": ""61b8f7f1-c9e0-4748-9543-16e89c02daa6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hurt"",
                    ""type"": ""Button"",
                    ""id"": ""4fbd1e56-e607-4d21-bac0-a027b1da4a0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Win"",
                    ""type"": ""Button"",
                    ""id"": ""6896686e-5e3c-4c52-ac55-c13d4af9a6b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lose"",
                    ""type"": ""Button"",
                    ""id"": ""2f977375-d861-4a8a-9a72-3e3a193e88d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""66da4e7e-fdc4-4d7d-8d40-667f69b6a620"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Idle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8549f5dd-e3f4-4cf8-ab91-b94b63ecc480"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9dd6d41-a5ac-4c34-8a67-a45b674dddb0"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hurt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b44b1c3-2128-4348-a177-890aaba4cea9"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Win"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97dcd601-5213-4ecb-b79b-84f962ab6713"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""974c15cb-fe18-40db-91c2-2c5e718ac26b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d1cbdf1-60cf-4aa6-a045-d13614c845b6"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackF"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb05cff1-65b0-4083-9eb8-527201c3dfb3"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DebugActionMap
        m_DebugActionMap = asset.FindActionMap("DebugActionMap", throwIfNotFound: true);
        m_DebugActionMap_Idle = m_DebugActionMap.FindAction("Idle", throwIfNotFound: true);
        m_DebugActionMap_MoveUp = m_DebugActionMap.FindAction("MoveUp", throwIfNotFound: true);
        m_DebugActionMap_MoveDown = m_DebugActionMap.FindAction("MoveDown", throwIfNotFound: true);
        m_DebugActionMap_AttackF = m_DebugActionMap.FindAction("AttackF", throwIfNotFound: true);
        m_DebugActionMap_AttackB = m_DebugActionMap.FindAction("AttackB", throwIfNotFound: true);
        m_DebugActionMap_Hurt = m_DebugActionMap.FindAction("Hurt", throwIfNotFound: true);
        m_DebugActionMap_Win = m_DebugActionMap.FindAction("Win", throwIfNotFound: true);
        m_DebugActionMap_Lose = m_DebugActionMap.FindAction("Lose", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DebugActionMap
    private readonly InputActionMap m_DebugActionMap;
    private List<IDebugActionMapActions> m_DebugActionMapActionsCallbackInterfaces = new List<IDebugActionMapActions>();
    private readonly InputAction m_DebugActionMap_Idle;
    private readonly InputAction m_DebugActionMap_MoveUp;
    private readonly InputAction m_DebugActionMap_MoveDown;
    private readonly InputAction m_DebugActionMap_AttackF;
    private readonly InputAction m_DebugActionMap_AttackB;
    private readonly InputAction m_DebugActionMap_Hurt;
    private readonly InputAction m_DebugActionMap_Win;
    private readonly InputAction m_DebugActionMap_Lose;
    public struct DebugActionMapActions
    {
        private @DebugControls m_Wrapper;
        public DebugActionMapActions(@DebugControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Idle => m_Wrapper.m_DebugActionMap_Idle;
        public InputAction @MoveUp => m_Wrapper.m_DebugActionMap_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_DebugActionMap_MoveDown;
        public InputAction @AttackF => m_Wrapper.m_DebugActionMap_AttackF;
        public InputAction @AttackB => m_Wrapper.m_DebugActionMap_AttackB;
        public InputAction @Hurt => m_Wrapper.m_DebugActionMap_Hurt;
        public InputAction @Win => m_Wrapper.m_DebugActionMap_Win;
        public InputAction @Lose => m_Wrapper.m_DebugActionMap_Lose;
        public InputActionMap Get() { return m_Wrapper.m_DebugActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionMapActionsCallbackInterfaces.Add(instance);
            @Idle.started += instance.OnIdle;
            @Idle.performed += instance.OnIdle;
            @Idle.canceled += instance.OnIdle;
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @AttackF.started += instance.OnAttackF;
            @AttackF.performed += instance.OnAttackF;
            @AttackF.canceled += instance.OnAttackF;
            @AttackB.started += instance.OnAttackB;
            @AttackB.performed += instance.OnAttackB;
            @AttackB.canceled += instance.OnAttackB;
            @Hurt.started += instance.OnHurt;
            @Hurt.performed += instance.OnHurt;
            @Hurt.canceled += instance.OnHurt;
            @Win.started += instance.OnWin;
            @Win.performed += instance.OnWin;
            @Win.canceled += instance.OnWin;
            @Lose.started += instance.OnLose;
            @Lose.performed += instance.OnLose;
            @Lose.canceled += instance.OnLose;
        }

        private void UnregisterCallbacks(IDebugActionMapActions instance)
        {
            @Idle.started -= instance.OnIdle;
            @Idle.performed -= instance.OnIdle;
            @Idle.canceled -= instance.OnIdle;
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @AttackF.started -= instance.OnAttackF;
            @AttackF.performed -= instance.OnAttackF;
            @AttackF.canceled -= instance.OnAttackF;
            @AttackB.started -= instance.OnAttackB;
            @AttackB.performed -= instance.OnAttackB;
            @AttackB.canceled -= instance.OnAttackB;
            @Hurt.started -= instance.OnHurt;
            @Hurt.performed -= instance.OnHurt;
            @Hurt.canceled -= instance.OnHurt;
            @Win.started -= instance.OnWin;
            @Win.performed -= instance.OnWin;
            @Win.canceled -= instance.OnWin;
            @Lose.started -= instance.OnLose;
            @Lose.performed -= instance.OnLose;
            @Lose.canceled -= instance.OnLose;
        }

        public void RemoveCallbacks(IDebugActionMapActions instance)
        {
            if (m_Wrapper.m_DebugActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActionMapActions @DebugActionMap => new DebugActionMapActions(this);
    public interface IDebugActionMapActions
    {
        void OnIdle(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnAttackF(InputAction.CallbackContext context);
        void OnAttackB(InputAction.CallbackContext context);
        void OnHurt(InputAction.CallbackContext context);
        void OnWin(InputAction.CallbackContext context);
        void OnLose(InputAction.CallbackContext context);
    }
}
